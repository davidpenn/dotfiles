#!/usr/bin/env bash
#

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*"
	else # pipe
		python -mjson.tool
	fi
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

# Start an HTTP server from a directory, optionally specifying the port
server() {
	local port="${1:-8000}"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

uuid() {
	local count=${1:1}
	for i in `seq 1 ${1}`; do
		uuidgen | awk '{gsub("-","",$0); print tolower($0)}'
	done
}

initmod() {
	go mod init $(pwd | sed -n -e 's/.*src\///p')
}

gh() {
	local toplevel=$(git rev-parse --show-toplevel 2>/dev/null)
	if [ -z "$toplevel" ]; then
		echo "directory is not a git repository"
		return
	fi

	if [[ $toplevel =~ "github.com" ]]; then
		local url="https://github.com${toplevel##*github.com}"
		open "${url}"
	else
		echo "could not find github.com"
	fi
}
